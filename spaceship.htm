<html>

<head>
  <title>SpaceShip</title>
  <meta http-equiv="content-type" content="text/html; charset=windows-1252">

  <script type="text/javascript" src="js/gl-matrix.js"></script>
  <script type="text/javascript" src="js/game/game-utils.js"></script>
  <script type="text/javascript" src="js/fbo.js"></script>
  <script type="text/javascript" src="js/background.js"></script>
  <script type="text/javascript" src="js/hero/modelObj.js"></script>
  <script type="text/javascript" src="js/sprite/sprite.js"></script>
  <script type="text/javascript" src="js/sprite/rocket.js"></script>
  <script type="text/javascript" src="js/sprite/life.js"></script>
  <script type="text/javascript" src="js/game/bonus.js"></script>
  <script type="text/javascript" src="js/game/score.js"></script>
  <script type="text/javascript" src="js/enemy/nazi-airplane.js"></script>
  <script type="text/javascript" src="js/enemy/bad-guy-generator.js"></script>
  <script type="text/javascript" src="js/sprite/mountains.js"></script>
  <script type="text/javascript" src="js/sprite/farground-cloud.js"></script>
  <script type="text/javascript" src="js/sprite/mob.js"></script>
  <script type="text/javascript" src="js/hero/hero.js"></script>
  <script type="text/javascript" src="js/game/event.js"></script>
  <script type="text/javascript" src="js/game/lifecycle.js"></script>
  <script type="text/javascript" src="js/game/game-loop.js"></script>


  <script id="background-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader *** 
      layout(location=0) in vec3 aVertexPosition; // la position du sommet 
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture 

      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

      void main(void) {
          // projection de la position
          gl_Position = vec4(aVertexPosition, 1.0);

          // stockage de la coordonnee de texture
          vTextureCoord = aVertexCoord;
      }
    </script>

  <script id="background-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant
      
      uniform vec2 uOffset;
      uniform float uAmplitude; // amplitude du bruit
      uniform float uFrequency; // frequence du bruit
      uniform float uPersistence; // persistence du bruit
      
    in vec2 vTextureCoord; // recuperation de la coord rasterisee
      out vec4 outColor;
      
      vec2 hash22(vec2 p) {
	  vec2 q = vec2(dot(p,vec2(127.1,311.7)), 
			dot(p,vec2(269.5,183.3)));
	  return fract(sin(q)*43758.5453123)*2.-1.;
      }
      
      float gnoise(in vec2 x) {
	  // cette fonction calcule un gradient noise
	  // un bruit al�atoire, lisse qui peut etre cacul�
	  // a la vol� avec une petite proc�dure. 
	  vec2 p = floor(x);
	  vec2 f = fract(x);
	  vec2 m = f*f*(3.-2.*f);
	  
	  return mix(
	      mix(dot(hash22(p+vec2(0.,0.)),f-vec2(0.,0.)),
		  dot(hash22(p+vec2(1.,0.)),f-vec2(1.,0.)),m.x),
	      mix(dot(hash22(p+vec2(0.,1.)),f-vec2(0.,1.)),
		  dot(hash22(p+vec2(1.,1.)),f-vec2(1.,1.)),m.x),m.y);
      }
      
      float fractalNoise(in vec2 p) {
	  // cette fonction utilise le gradient noise
	  // pour cr�er un bruit fractal (qui se ressemble
	  // � des echelles multiples)
       	  const int nb = 5; // nb octave
       	  float f = uFrequency; // frequency
       	  float a = uAmplitude; // amplitude
       	  float e = uPersistence; // persistence

       	  float n = 0.0;
       	  for(int i=0;i<nb;++i) {
              n = n + a*gnoise(p*f);
              f = 2.0*f;
              a = a*e;
       	  }
       	  return n;
      }

      float computeHeight(in vec2 p) {
	  // vous pouvez modifier cette fonction comme vous
	  // le souhaitez pour fabriquer votre propre background

	  // exemple avec une sinusoide

	  // float test = 3.0*sin(p.x*5.0)*sin(p.y*5.0);

	  // exemple avec un bruit de perlin 
	  float test = fractalNoise(p)*0.5+0.5;

	  // et on peut combiner tout ce que l'on veut... 
	  
	  return test;
      }

      vec3 computeNormal(in vec2 p) {
	  // cette fonction permet de calculer le vecteur normal
	  // (l'orientation de la surface en tout point)
	  float scale = 70.0;
	  float xp = computeHeight(p+vec2( 0.001,0.0));
	  float xm = computeHeight(p+vec2(-0.001,0.0));
	  float yp = computeHeight(p+vec2(0.0, 0.001));
	  float ym = computeHeight(p+vec2(0.0,-0.001));
	  
	  float gx = 0.5*(xp-xm)*scale;
	  float gy = 0.5*(yp-ym)*scale;

	  vec3 v1 = normalize(vec3(1.0,0.0,gx));
	  vec3 v2 = normalize(vec3(0.0,1.0,gy));

	  return cross(v1,v2);
      }
      
      void main(void) {
	  // d�calage avec la variable uOffset
	  vec2 tmp = vTextureCoord*2.0-vec2(1.0);

	  // offset permets de faire bouger le backgroud vers le haut dans cet exemple
	  vec2 p = tmp+uOffset;
	  
	  float d = computeHeight(p); // profondeur au point p
	  vec3 n = computeNormal(p); // normale au point p
	  	  
	  // affichage de la profondeur
	  outColor = vec4(d,d,d,1.0);

	  // affichage des normales
	  outColor = vec4(n,1.0);
	  
	  // affichage d'une couleur en fonction de la hauteur
	  vec4 c1 = vec4(0,1,0,1); // vert
	  vec4 c2 = vec4(1,1,1,1); // blanc
	  outColor = mix(c1,c2,d); // interpolation entre c1 et c2 en fonction de la profondeur
	  
      }
      
    </script>

  <script id="model-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader *** 
      layout(location=0) in vec3 aVertexPosition;
      layout(location=1) in vec3 aVertexNormal;
      
      uniform mat4 uModelMatrix;
      uniform mat4 uViewMatrix;
      uniform mat4 uProjMatrix;
      uniform float timer;
      
      out vec3 vNormal;
      
      void main(void) {
          // projection de la position
	  vec3 p = aVertexPosition;

	  // exemple de modification de la hauteur du mod�le avec un simple timer
	  // bien pour les petits effets, mais si possible modifier directement la
	  // matrice model en amont (dans setParameters du fichier modelObj)
	  //p.z += 3.0*sin(timer*10.0);
	  
          gl_Position = uProjMatrix * uViewMatrix * uModelMatrix * vec4(p, 1.0);
          vNormal = mat3(inverse(transpose(uViewMatrix * uModelMatrix)))*normalize(aVertexNormal);
      }
    </script>

  <script id="model-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision mediump float; // precision des nombres flottant
      
    in vec3 vNormal;
      out vec4 outColor;
      
      void main(void) {
          // la normale (en tout point)
	  vec3 n = normalize(vNormal);

	  // une direction de lumi�re quelconque
	  vec3 l = normalize(vec3(-1.0,0.0,1.0));

	  // une couleur (ex. rouge)
	  vec3 Kd = vec3(0.2,0.2,1.0);

	  // un �clairage simple
	  vec3 diff = Kd*max(dot(n,l),0.0);

	  // que l'on affiche en sortie
          outColor = vec4(diff,1.0);
      }
    </script>

  <script id="splat-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader *** 
      layout(location=0) in vec3 aVertexPosition; // la position du sommet 
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture 
      
      uniform vec3 uPosition; // position du vaisseau
      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee
      
      void main(void) {
	  // projection de la position
	  gl_Position = vec4(aVertexPosition.xy+uPosition.xy,uPosition.z, 1.0);
	  
	  // stockage de la coordonnee de texture
	  vTextureCoord = aVertexCoord;
      }
    </script>

  <script id="splat-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant

      uniform vec3 maCouleur;
      uniform sampler2D uTex;
      
    in vec2 vTextureCoord; // recuperation de la coord rasterisee
      out vec4 outColor;
      
      void main(void) {
	  // affichage d'une texture
	  vec2 coord = vTextureCoord;
    
	  outColor = texture(uTex,coord);

	  // affichage d'un rond bleu
	  // float test = distance(vec2(.5),vTextureCoord);
	  // if(test<0.1) {
	  //     outColor = vec4(0.,0.,1.,1.);
	  // } else {
	  //     outColor = vec4(0.);
	  // }
	  
	  // affichage d'un rond avec couleur param�tr�e et bords lisses 
	  // float alpha = 1.-smoothstep(0.2,0.25,distance(vec2(.5),vTextureCoord));
	  // outColor = vec4(alpha*maCouleur,alpha);
      }
    </script>


  <script type="text/javascript">
    let background;
    let hero;
    let badGuyGenerator;
    let bgParallax;
    let score;
    let bonus;

    document.onkeydown = startGame;
  </script>

  <style type="text/css">
    body {
      text-align: center;
      margin: 0;

    }

    #SpaceShip {
      border: none;
      width: 100%;
      height: 100%;

    }
  </style>
</head>


<body>
  <canvas id="SpaceShip" width="1080" height="720" style="display: none"></canvas>
  <div id="menu">
    <p>Press a key to play</p>
  </div>
</body>

</html>